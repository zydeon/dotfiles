[
  // Auto indent
	// { "keys": ["super+shift+r"], "command": "auto_indent" },

	{ "keys": ["shift+super+c"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },
	{ "keys": ["super+backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Line.sublime-macro"} },
  { "keys": ["super+alt+c"], "command": "copy_path"},

  // code formatter
  { "keys": ["super+i"], "command": "code_formatter" },

  // Close all files
  { "keys": ["super+alt+w"], "command": "close_all" },

  // Avoid double escape, when using Vim mode
  { "keys": ["escape"], "command": "exit_insert_mode",
      "context": [
          { "key": "setting.command_mode", "operand": false },
          { "key": "setting.is_widget", "operand": false },
          // { "key": "setting.vintage_ctrl_keys" }
      ]
  },

  // selection pairing with *, _ and ` (From MarkdownEditing)
  { "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*${0:$SELECTION}*"}, "context":
   [
       // { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
       // { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
       // { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
       // { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_*]$", "match_all": true },
       // { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
       { "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
       // { "key": "selector", "operator": "not_equal", "operand": "markup.raw", "match_all": true }
   ]
  },

  { "keys": ["ctrl+a", "k"], "command": "travel_to_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "l"], "command": "travel_to_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "j"], "command": "travel_to_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "h"], "command": "travel_to_pane", "args": {"direction": "left"} },
  
  { "keys": ["ctrl+a", "shift+k"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "shift+l"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "shift+j"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "shift", "h"], "command": "carry_file_to_pane", "args": {"direction": "left"} },
  
  { "keys": ["ctrl+a", "alt+k"], "command": "clone_file_to_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "alt+l"], "command": "clone_file_to_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "alt+j"], "command": "clone_file_to_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "alt+h"], "command": "clone_file_to_pane", "args": {"direction": "left"} },
  // You can also create the pane automatically with the following command (insert empty parameters):
  // { "keys": [], "command": "create_pane_with_cloned_file", "args": {"direction": ""} }

  { "keys": ["ctrl+a", "ctrl+k"], "command": "create_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "ctrl+l"], "command": "create_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "ctrl+j"], "command": "create_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "ctrl+h"], "command": "create_pane", "args": {"direction": "left"} },
  // You can also add  "give_focus": true to automatically focus on the new pane as follows:
  // { "keys": [], "command": "create_pane", "args": {"direction": "", "give_focus": true} }

  { "keys": ["ctrl+a", "ctrl+shift+k"], "command": "destroy_pane", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "ctrl+shift+l"], "command": "destroy_pane", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "ctrl+shift+j"], "command": "destroy_pane", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "ctrl+shift+h"], "command": "destroy_pane", "args": {"direction": "left"} },
  // You can also destroy the current pane by binding the following command:
  // { "keys": [], "command": "destroy_pane", "args": {"direction": "self"} },
  
  { "keys": ["ctrl+a", "ctrl+alt+k"], "command": "create_pane_with_file", "args": {"direction": "up"} },
  { "keys": ["ctrl+a", "ctrl+alt+l"], "command": "create_pane_with_file", "args": {"direction": "right"} },
  { "keys": ["ctrl+a", "ctrl+alt+j"], "command": "create_pane_with_file", "args": {"direction": "down"} },
  { "keys": ["ctrl+a", "ctrl+alt+h"], "command": "create_pane_with_file", "args": {"direction": "left"} },
  

  // You can pull a file from another pane by binding the following command:
  // { "keys": [], "command": "pull_file_from_pane", "args": { "direction": ""} }

  { "keys": ["ctrl+a", "ctrl+z"], "command": "zoom_pane", "args": {"fraction": 0.9} },
  { "keys": ["ctrl+a", "ctrl+shift+z"], "command": "unzoom_pane", "args": {} },

  { "keys": ["ctrl+a", "ctrl+c"], "command": "resize_pane", "args": {"orientation": "cols"} },
  { "keys": ["ctrl+a", "ctrl+r"], "command": "resize_pane", "args": {"orientation": "rows"} },


  { "keys": ["super+alt+r"], "command": "reveal_in_side_bar"},

  // Hide inline compile errors
  { "keys": ["super+alt+l"],
    "command": "exec",
    "args": {
        "hide_phantoms_only": true
    },
    "context": [
        { "key": "setting.command_mode" }
    ]},

  // Go to definition
  { "keys": ["alt+d"], "command": "goto_definition" }

]
